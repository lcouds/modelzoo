---
apiVersion: v1
kind: Namespace
metadata:
  name: spiritx-system
---
# Source: modelzoo/templates/inference-pc.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: inference
value: 1e+06
globalDefault: false
description: "This priority class should be used for inference pods only."
---
# Source: modelzoo/templates/modelzoo-pc.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: modelzoo
value: 1e+07
preemptionPolicy: Never
globalDefault: false
description: "This priority class should be used for modelzoo only."
---
# Source: modelzoo/templates/ingress-operator-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-operator
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: ingress-operator
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modelzoo-operator
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: modelzoo-operator
---
# Source: modelzoo/templates/prometheus-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modelzoo-prometheus
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: prometheus
---
# Source: modelzoo/templates/prometheus-cfg.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: modelzoo
    component: prometheus-config
  name: prometheus-config
  namespace: "spiritx-system"
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
      external_labels:
          monitor: 'faas-monitor'

    rule_files:
        - 'alert.rules.yml'
        - 'prometheus-rules.yml'

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 10s
        static_configs:
          - targets: ['localhost:9090']

      # Capture endpoints in the modelzoo namespace with a scrape annotation
      # such as the gateway-provider service.
      - job_name: 'modelzoo-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          separator: ;
          regex: ([^:]+)(?::\d+)?;(\d+)
          target_label: __address__
          replacement: $1:$2
          action: replace

        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        # - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_port]
        #   action: keep
        #   regex: true

      - job_name: 'kubernetes-pods'
        scrape_interval: 5s
        honor_labels: false
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__

      - job_name: "service_kube-state-metrics"
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
          action: keep
          regex: kube-state-metrics
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: service

      - job_name: 'kubernetes-resource-metrics'
        scrape_interval: 10s
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/resource
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: (pod)_(cpu|memory)_(.+)
          action: keep
        # Exclude container metrics
        - source_labels: [__name__]
          regex: container_(.+)
          action: drop
        - action: replace
          source_labels:
          - namespace
          regex: '(.*)'
          replacement: '$1'
          target_label: kubernetes_namespace
        # Output deployment name from Pod
        - action: replace
          source_labels:
          - pod
          regex: '^([0-9a-zA-Z-]+)+(-[0-9a-zA-Z]+-[0-9a-zA-Z]+)$'
          replacement: '$1'
          target_label: deployment_name
        # Output fully-qualified function name fn.ns
        - source_labels: [deployment_name, kubernetes_namespace]
          separator: ";"
          regex: '(.*);(.*)'
          replacement: '${1}.${2}'
          target_label: "inference_name"
    
      - job_name: 'nvidia-dcgm'
        scrape_interval: 10s
        static_configs:
          - targets: ['localhost:9400']

      - job_name: kubernetes-cadvisor
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics/cadvisor
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc.cluster.local:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor 
    
      - job_name: kubernetes-kubelet
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - target_label: __metrics_path__
          source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          replacement: /api/v1/nodes/${1}/proxy/metrics

  alert.rules.yml: |
    groups:
      - name: modelzoo
        rules:
        - alert: service_down
          expr: up == 0

  prometheus-rules.yml: |
    groups:
    - name: load
      rules:
      - record: job:inference_current_load:sum
        expr: sum by (inference_name) ( rate( gateway_inference_invocation_total{}[30s] ) )  and avg by (inference_name) (gateway_service_target_load{scaling_type="rps"}) > 1
        labels:
          scaling_type: rps

      - record: job:inference_current_load:sum
        expr: sum by (inference_name) ( max_over_time( gateway_inference_invocation_inflight[45s:5s])) and on (inference_name) avg by(inference_name) (gateway_service_target_load{scaling_type="capacity"}) > bool 1
        labels:
          scaling_type: capacity

      - record: job:inference_current_load:sum
        expr: sum(irate ( pod_cpu_usage_seconds_total{}[1m])*1000) by (inference_name) * on (inference_name) avg by (inference_name) (gateway_service_target_load{scaling_type="cpu"}  > bool 1 )
        labels:
          scaling_type: cpu

    - name: recently_started_1m
      interval: 10s
      rules:
      - record: job:inference_current_started:max_sum
        expr: max_over_time(sum by (inference_name) (rate( gateway_inference_invocation_started{}[1m]))[1m:5s]) > 0
    - name: inspectors
      interval: 10s
      rules:
      - record: pod_restart_count_over_2_10m
        expr: (sum by (pod,namespace) (increase(kube_pod_container_status_restarts_total{namespace=~"modelz-(.*)"}[10m])) > 2) * on (pod) group_left(inference_name) (label_join(label_replace(kube_pod_info{created_by_kind="ReplicaSet",namespace=~"modelz-(.*)"}, "inference", "$1", "created_by_name", "(.+)-.+"), "inference_name",".","inference","namespace"))
    - name: resources
      interval: 10s
      rules:
      - record: pod_cpu_usage_5m
        expr: label_replace(sum(rate(pod_cpu_usage_seconds_total{}[5m])) by (pod, namespace,inference_name), "inference", "$1", "inference_name", "(.+)-.+")*100
      - record: pod_memory_usage_5m
        expr: label_replace(sum(rate(pod_memory_working_set_bytes{}[5m])) by (pod, namespace,inference_name), "inference", "$1", "inference_name", "(.+)-.+")/2^20
      - record: pod_gpu_utilization
        expr: sum(DCGM_FI_DEV_GPU_UTIL{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_gpu_memory_usage
        expr: sum(DCGM_FI_DEV_FB_USED{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_gpu_memory_utilization
        expr: sum(DCGM_FI_DEV_MEM_COPY_UTIL{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_network_write
        expr: sum(rate(container_network_receive_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_network_read
        expr: sum(rate(container_network_transmit_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_disk_write
        expr: sum(rate(container_fs_writes_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_disk_read
        expr: sum(rate(container_fs_reads_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
---
# Source: modelzoo/templates/ingress-operator-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-operator-rw
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: ingress-operator
rules:
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferenceingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "namespaces", "endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: modelzoo-clusterrole-operator
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: modelzoo-operator
rules:
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferenceingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferences"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/portforward", "pods/exec"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "watch", "list"]
---
# Source: modelzoo/templates/prometheus-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: modelzoo-prometheus
  labels:
    app: modelzoo
    component: prometheus
rules:
  - apiGroups: [""]
    resources:
      - services
      - endpoints
      - pods
      - nodes
      - nodes/proxy
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
# Source: modelzoo/templates/ingress-operator-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-operator-rw
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: ingress-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-operator-rw
subjects:
  - kind: ServiceAccount
    name: ingress-operator
    namespace: "spiritx-system"
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: modelzoo-clusterrole-operator
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: modelzoo-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: modelzoo-clusterrole-operator
subjects:
  - kind: ServiceAccount
    name: modelzoo-operator
    namespace: "spiritx-system"
---
# Source: modelzoo/templates/prometheus-rbac.yaml
# Cluster binding for node discovery and node-level metrics
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: modelzoo-nodemetrics-prometheus
  labels:
    app: modelzoo
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: modelzoo-prometheus
subjects:
  - kind: ServiceAccount
    name: modelzoo-prometheus
    namespace: "spiritx-system"
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: modelzoo-operator-rw
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: modelzoo-operator
rules:
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferenceingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferences"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "namespaces", "endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: modelzoo-operator-rw
  namespace: "spiritx-system"
  labels:
    app: modelzoo
    component: modelzoo-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: modelzoo-operator-rw
subjects:
  - kind: ServiceAccount
    name: modelzoo-operator
    namespace: "spiritx-system"
---
# Source: modelzoo/templates/modelzooetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: modelzoo
    component: modelzoo-operator
  name: modelzoo-profiles
  namespace: "spiritx-system"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: modelzoo-profiles
subjects:
  - kind: ServiceAccount
    name: modelzoo-operator
    namespace: "spiritx-system"
---
# Source: modelzoo/templates/agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: modelzoo
    component: agent
  name: agent
  namespace: "spiritx-system"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
  selector:
    app: agent
---
# Source: modelzoo/templates/autoscaler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: modelzoo
    component: autoscaler
  name: autoscaler
  namespace: "spiritx-system"
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: autoscaler
---
# Source: modelzoo/templates/prometheus-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: modelzoo
    component: prometheus
  name: prometheus
  namespace: "spiritx-system"
spec:
  type: ClusterIP
  ports:
    - port: 9090
      protocol: TCP
  selector:
    app: prometheus
---
# Source: modelzoo/templates/agent-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: modelzoo
    component: agent
  name: agent
  namespace: "spiritx-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
      labels:
        app: agent
    spec:
      priorityClassName: modelzoo
      serviceAccountName: modelzoo-operator
      containers:
        - name: agent
          resources:
            limits:
              cpu: "2"
              memory: 8Gi
            requests:
              cpu: 100m
              memory: 120Mi
          image: "harbor.xz.com:8443/modelzooai/modelzoo-agent:v0.0.28.rc.4"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/agent
            - --debug
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /healthz
              port: 8080
          env:
            - name: MODELZ_AGENT_SERVER_PORT
              value: "8080"
            - name: MODELZ_AGENT_SERVER_READ_TIMEOUT
              value: "305s"
            - name: MODELZ_AGENT_SERVER_WRITE_TIMEOUT
              value: "305s"
            - name: MODELZ_AGENT_METRICS_PROMETHEUS_PORT
              value: "9090"
            - name: MODELZ_AGENT_METRICS_PROMETHEUS_HOST
              value: "prometheus.default"
            - name: MODELZ_AGENT_EVENT_ENABLED
              value: "false"
            - name: MODELZ_AGENT_INGRESS_ENABLED
              value: "true"
            - name: MODELZ_AGENT_INGRESS_NAMESPACE
              value: "default"
            - name: MODELZ_AGENT_MODELZ_CLOUD_ENABLED
              value: "false"
            - name: MODELZ_CLOUD_AGENT_TOKEN
              value: ""
            - name: MODELZ_CLOUD_AGENT_HEARTBEAT_INTERVAL
              value: "60s"
            - name: MODELZ_CLOUD_AGENT_REGION
              value: "us-central1"
            - name: MODELZ_CLOUD_AGENT_UNIFIED_API_KEY
              value: ""
            - name: MODELZ_UPSTREAM_TIMEOUT
              value: "300s"
            - name: MODELZ_MAX_IDLE_CONNECTIONS
              value: "1024"
            - name: MODELZ_MAX_IDLE_CONNECTIONS_PER_HOST
              value: "1024"
          volumeMounts:
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
---
# Source: modelzoo/templates/autoscaler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: modelzoo
    component: autoscaler
  name: autoscaler
  namespace: "spiritx-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autoscaler
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "false"
      labels:
        app: autoscaler
    spec:
      priorityClassName: modelzoo
      volumes:
      containers:
        - name:  autoscaler
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 128Mi
          image: "harbor.xz.com:8443/modelzooai/modelzoo-autoscaler:v0.0.28.rc.4"
          imagePullPolicy: IfNotPresent
          command:
            - "/usr/bin/autoscaler"
            - --debug
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /system/info
              port: 8080
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /system/info
              port: 8080
          env:
            - name: MODELZ_GATEWAY_HOST
              value: "http://agent.default:8080"
            - name: MODELZ_PROMETHEUS_HOST
              value: "prometheus.default"
            - name: MODELZ_PROMETHEUS_PORT
              value: "9090"
            - name: MODELZ_BASIC_AUTH
              value: "false"
---
# Source: modelzoo/templates/ingress-operator-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: modelzoo
    component: ingress-operator
  name: ingress-operator
  namespace: "spiritx-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-operator
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
      labels:
        app: ingress-operator
    spec:
      priorityClassName: modelzoo
      serviceAccountName: ingress-operator
      containers:
        - name: operator
          command:
            - /usr/bin/ingress-operator
            - --host
            - "agent"
            - --namespace
            - "default"
            - --debug
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 128Mi
          image: "harbor.xz.com:8443/modelzooai/ingress-operator:v0.0.28.rc.4"
          imagePullPolicy: IfNotPresent
---
# Source: modelzoo/templates/modelzooetes-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: modelzoo
    component: modelzooetes
  name: modelzooetes
  namespace: "spiritx-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: modelzooetes
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
      labels:
        app: modelzooetes
    spec:
      priorityClassName: modelzoo
      serviceAccountName: modelzoo-operator
      volumes:
      containers:
        - name: modelzooetes
          resources:
            limits:
              cpu: 1000m
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 120Mi
          image: "harbor.xz.com:8443/modelzooai/modelzooetes:v0.0.28.rc.4"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/modelzooetes
          env:
            - name: MODELZOOETES_INFERENCE_IMAGE_PULL_POLICY
              value: "IfNotPresent"
            - name: MODELZOOETES_INFERENCE_SET_UP_RUNTIME_CLASS_NVIDIA
              value: "true"
            - name: MODELZOOETES_PROBE_READINESS_INITIAL_DELAY_SECONDS
              value: "30"
            - name: MODELZOOETES_PROBE_READINESS_TIMEOUT_SECONDS
              value: "1"
            - name: MODELZOOETES_PROBE_READINESS_PERIOD_SECONDS
              value: "10"
            - name: MODELZOOETES_PROBE_LIVENESS_INITIAL_DELAY_SECONDS
              value: "30"
            - name: MODELZOOETES_PROBE_LIVENESS_TIMEOUT_SECONDS
              value: "1"
            - name: MODELZOOETES_PROBE_LIVENESS_PERIOD_SECONDS
              value: "10"
            - name: MODELZOOETES_PROBE_STARTUP_INITIAL_DELAY_SECONDS
              value: "0"
            - name: MODELZOOETES_PROBE_STARTUP_TIMEOUT_SECONDS
              value: "1"
            - name: MODELZOOETES_PROBE_STARTUP_PERIOD_SECONDS
              value: "2"
---
# Source: modelzoo/templates/prometheus-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: modelzoo
    component: prometheus
  name: prometheus
  namespace: "spiritx-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        sidecar.istio.io/inject: "true"
        checksum/prometheus-config: "e4aaa6764b6cc0fa5685e8ca40d7b22bc64f0c720fca9d3857fa61301941b336"
    spec:
      priorityClassName: modelzoo
      serviceAccountName: modelzoo-prometheus
      containers:
        - name: prometheus
          resources:
            limits:
              cpu: 1000m
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 512Mi
          image: harbor.xz.com:8443/library/prom/prometheus:v2.41.0
          command:
            - "prometheus"
            - "--config.file=/etc/prometheus/prometheus.yml"
          imagePullPolicy:
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
          ports:
            - containerPort: 9090
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
            - mountPath: /etc/prometheus/prometheus-rules.yml
              name: prometheus-config
              subPath: prometheus-rules.yml
            - mountPath: /etc/prometheus/alert.rules.yml
              name: prometheus-config
              subPath: alert.rules.yml
            - mountPath: /prometheus/data
              name: prom-data
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
                mode: 0644
              - key: alert.rules.yml
                path: alert.rules.yml
                mode: 0644
              - key: prometheus-rules.yml
                path: prometheus-rules.yml
                mode: 0644
        - name: prom-data
          emptyDir: {}
---
# Source: modelzoo/templates/agent-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: modelzoo
    component: agent
  name: agent
  namespace: "spiritx-system"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: agent
                port:
                  number: 8080
            path: /(.*)
            pathType: Prefix